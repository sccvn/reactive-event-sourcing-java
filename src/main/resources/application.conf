akka {

  # Loggers to register at boot time (akka.event.Logging$DefaultLogger logs to STDOUT)
  loggers = ["akka.event.slf4j.Slf4jLogger"]

  # Log level used by the configured loggers (see "loggers") as soon
  # as they have been started; before that, see "stdout-loglevel"
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  loglevel = DEBUG

  log-config-on-start = off

  # Log level for the very basic logger activated during ActorSystem startup.
  # This logger prints the log messages to stdout (System.out).
  # Options: OFF, ERROR, WARNING, INFO, DEBUG
  stdout-loglevel = "DEBUG"

  # Filter of log events that is used by the LoggingAdapter before publishing log events to the eventStream.
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

  actor {
    debug {
      receive = on
      autoreceive = on
      lifecycle = on
      unhandled = on
      loglevel = "DEBUG"
    }

    provider = "cluster"

    enable-additional-serialization-bindings = on
    allow-java-serialization = on //only for prototyping, turn off for production deployment
    warn-about-java-serializer-usage = off //turn on for production deployment
  }

  cluster {
    //    seed-nodes = ["akka://es-workshop@127.0.0.1:2551"]
    shutdown-after-unsuccessful-join-seed-nodes = 60s
  }
  coordinated-shutdown.exit-jvm = on

  discovery {
    method = config
    config.services = {
      es-workshop = {
        endpoints = [
          {
            host = "127.0.1.1"
            port = 8558
          }
        ]
      }
    }
  }

  management.cluster.bootstrap.contact-point-discovery.required-contact-point-nr = 1

  remote {
    log-remote-lifecycle-events = on //off

    artery {
      canonical.hostname = 127.0.0.1
      canonical.port = 2551
    }
  }

  persistence.journal.plugin = "jdbc-journal"

  projection.jdbc {
    dialect = "postgres-dialect"
    blocking-jdbc-dispatcher {
      thread-pool-executor {
        # Use same number of threads as connections in the JDBC connection pool.
        fixed-pool-size = 10
      }
    }
  }
}

app {
  run-projections = false
  run-projections = ${?APP_RUN_PROJECTIONS}
}

jdbc-journal {
  slick = ${slick}
}

jdbc-read-journal {
  slick = ${slick}
}

slick = {
  profile = "slick.jdbc.PostgresProfile$"
  db {
    host = "localhost"
    host = ${?SQL_HOST}
    port = "5432"
    port = ${?SQL_PORT}
    dbName = "postgres"
    dbName = ${?SQL_DB_NAME}
    url = "jdbc:postgresql://"${slick.db.host}":"${slick.db.port}"/"${slick.db.dbName}"?reWriteBatchedInserts=true"
    user = "admin"
    user = ${?SQL_USER}
    password = "admin"
    password = ${?SQL_PASSWORD}
    driver = "org.postgresql.Driver"
    numThreads = 10
    maxConnections = 10
    minConnections = 1
  }
}

